// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Stocky;

namespace Stocky.Web.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20191121201838_ResetMigration")]
    partial class ResetMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Stocky.Data.Entities.ApplicationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("GroupName")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<bool>("OnlyForOwner");

                    b.Property<string>("Type")
                        .HasMaxLength(200);

                    b.Property<string>("Value")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AppClaims");
                });

            modelBuilder.Entity("Stocky.Data.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(450);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("SharedKey")
                        .HasMaxLength(450);

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AppRoles");
                });

            modelBuilder.Entity("Stocky.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AvatarURL");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Configuration");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Designation");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<string>("FullName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsOwner");

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("SharedKey")
                        .HasMaxLength(450);

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("Stocky.Data.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AttachmentURL");

                    b.Property<string>("ContentType");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<byte[]>("Data");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("SharedKey");

                    b.Property<long>("Size");

                    b.Property<string>("Title");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("Stocky.Data.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.Property<string>("SharedKey");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Stocky.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(2500);

                    b.Property<string>("Icon")
                        .HasMaxLength(150);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<Guid?>("ParentCategoryId");

                    b.Property<string>("SharedKey");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Stocky.Data.Entities.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ColorCode");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("SharedKey");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("Stocky.Data.Entities.CountSheet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AdjustmentDttm");

                    b.Property<DateTime?>("CompletedDate");

                    b.Property<string>("CountSheetNumber");

                    b.Property<string>("CountedBy");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCancelled");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Remarks");

                    b.Property<string>("SharedKey");

                    b.Property<DateTime?>("SnapshotDttm");

                    b.Property<DateTime>("StartedDate");

                    b.Property<int>("Status");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("CountSheets");
                });

            modelBuilder.Entity("Stocky.Data.Entities.CountSheetAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AttachmentId");

                    b.Property<Guid>("CountSheetId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("SharedKey");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CountSheetId");

                    b.HasIndex("AttachmentId", "CountSheetId")
                        .IsUnique();

                    b.ToTable("CountSheetAttachments");
                });

            modelBuilder.Entity("Stocky.Data.Entities.CountSheetItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CountSheetId");

                    b.Property<decimal?>("CountedQty");

                    b.Property<decimal?>("CountedQuantityDisplay");

                    b.Property<string>("CountedQuantityUom");

                    b.Property<string>("CountedSerials");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("LocationId");

                    b.Property<Guid>("ProductId");

                    b.Property<string>("SharedKey");

                    b.Property<decimal?>("SnapshotQty");

                    b.Property<string>("SnapshotSerials");

                    b.Property<string>("Sublocation");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("CountSheetId");

                    b.HasIndex("ProductId");

                    b.HasIndex("LocationId", "ProductId", "CountSheetId")
                        .IsUnique();

                    b.ToTable("CountSheetItems");
                });

            modelBuilder.Entity("Stocky.Data.Entities.CountSheetItemVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CountSheetId");

                    b.Property<Guid?>("CountSheetItemId");

                    b.Property<decimal?>("CountedQty");

                    b.Property<decimal?>("CountedQuantityDisplay");

                    b.Property<string>("CountedQuantityUom");

                    b.Property<string>("CountedSerials");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("LocationId");

                    b.Property<Guid?>("ProductId");

                    b.Property<string>("SharedKey");

                    b.Property<decimal?>("SnapshotQty");

                    b.Property<string>("SnapshotSerials");

                    b.Property<string>("Sublocation");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("CountSheetId");

                    b.HasIndex("CountSheetItemId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.ToTable("CountSheetItemVersions");
                });

            modelBuilder.Entity("Stocky.Data.Entities.CountSheetVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AdjustmentDttm");

                    b.Property<DateTime?>("CompletedDate");

                    b.Property<Guid?>("CountSheetId");

                    b.Property<string>("CountSheetNumber");

                    b.Property<string>("CountedBy");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCancelled");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Remarks");

                    b.Property<string>("SharedKey");

                    b.Property<DateTime?>("SnapshotDttm");

                    b.Property<DateTime>("StartedDate");

                    b.Property<int>("Status");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("CountSheetId");

                    b.ToTable("CountSheetVersions");
                });

            modelBuilder.Entity("Stocky.Data.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Mobile")
                        .HasMaxLength(30);

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.Property<string>("Phone")
                        .HasMaxLength(30);

                    b.Property<string>("SharedKey");

                    b.Property<string>("State")
                        .HasMaxLength(100);

                    b.Property<string>("Street")
                        .HasMaxLength(100);

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Stocky.Data.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentType");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<byte[]>("Data");

                    b.Property<string>("Description");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("SharedKey");

                    b.Property<int>("Size");

                    b.Property<string>("Title");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Stocky.Data.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("SharedKey");

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Stocky.Data.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BarcodeSystem");

                    b.Property<Guid?>("BrandId");

                    b.Property<decimal>("BuyingCost");

                    b.Property<decimal>("BuyingPrice");

                    b.Property<Guid?>("CategoryId");

                    b.Property<Guid?>("ColorId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<Guid?>("DefaultLocationId");

                    b.Property<float>("Depth");

                    b.Property<string>("Description")
                        .HasMaxLength(3000);

                    b.Property<float>("Height");

                    b.Property<Guid?>("ImageId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDiscontinued");

                    b.Property<bool>("IsParent");

                    b.Property<Guid?>("LastSupplierId");

                    b.Property<int>("MinStockLevel");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<Guid?>("ParentId");

                    b.Property<string>("ProductImageURL");

                    b.Property<string>("ProductPageURL");

                    b.Property<int>("ReorderPoint");

                    b.Property<int>("ReorderQuantity");

                    b.Property<string>("SKU")
                        .HasMaxLength(30);

                    b.Property<string>("SNO")
                        .HasMaxLength(500);

                    b.Property<decimal>("SellingCost");

                    b.Property<decimal>("SellingPrice");

                    b.Property<string>("SharedKey");

                    b.Property<Guid?>("SizeId");

                    b.Property<string>("Tags")
                        .HasMaxLength(500);

                    b.Property<string>("UPC")
                        .HasMaxLength(30);

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<float>("Weight");

                    b.Property<float>("Width");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ColorId");

                    b.HasIndex("DefaultLocationId");

                    b.HasIndex("ImageId");

                    b.HasIndex("LastSupplierId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SizeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Stocky.Data.Entities.ProductAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AttachmentId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("ProductId");

                    b.Property<string>("SharedKey");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttachment");
                });

            modelBuilder.Entity("Stocky.Data.Entities.PurchaseOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AmountPaid");

                    b.Property<decimal?>("AncillaryExpenses");

                    b.Property<decimal>("Balance");

                    b.Property<string>("ContactName");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime?>("DueDate");

                    b.Property<decimal>("ExchangeRate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCancelled");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("LocationId");

                    b.Property<DateTime>("OrderDate");

                    b.Property<decimal?>("OrderExtra");

                    b.Property<string>("OrderNumber");

                    b.Property<string>("OrderRemarks");

                    b.Property<int>("OrderStatus");

                    b.Property<decimal>("OrderSubTotal");

                    b.Property<decimal>("OrderTotal");

                    b.Property<int>("PaymentStatus");

                    b.Property<string>("Phone");

                    b.Property<string>("ReceiveRemarks");

                    b.Property<DateTime?>("RequestShipDate");

                    b.Property<decimal?>("ReturnExtra");

                    b.Property<decimal>("ReturnFee");

                    b.Property<string>("ReturnRemarks");

                    b.Property<decimal>("ReturnSubTotal");

                    b.Property<decimal>("ReturnTotal");

                    b.Property<string>("SharedKey");

                    b.Property<string>("SummaryLinePermutation");

                    b.Property<string>("SupplierAddressRemarks");

                    b.Property<Guid>("SupplierId");

                    b.Property<string>("SupplierOrderNumber");

                    b.Property<decimal>("Total");

                    b.Property<string>("UnstockRemarks");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("Stocky.Data.Entities.PurchaseOrderAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AttachmentId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("PurchaseOrderId");

                    b.Property<string>("SharedKey");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("AttachmentId", "PurchaseOrderId")
                        .IsUnique();

                    b.ToTable("PurchaseOrderAttachments");
                });

            modelBuilder.Entity("Stocky.Data.Entities.PurchaseOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<decimal>("Discount");

                    b.Property<bool?>("DiscountIsPercent");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("ProductId");

                    b.Property<Guid?>("PurchaseOrderId");

                    b.Property<decimal>("Quantity");

                    b.Property<decimal?>("QuantityDisplay");

                    b.Property<string>("QuantityUom");

                    b.Property<string>("Serials");

                    b.Property<bool?>("ServiceCompleted");

                    b.Property<string>("SharedKey");

                    b.Property<decimal>("SubTotal");

                    b.Property<string>("SupplierItemCode");

                    b.Property<decimal>("UnitPrice");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderItems");
                });

            modelBuilder.Entity("Stocky.Data.Entities.PurchaseOrderReceiveItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("LocationId");

                    b.Property<Guid>("ProductId");

                    b.Property<Guid>("PurchaseOrderId");

                    b.Property<decimal>("Quantity");

                    b.Property<decimal?>("QuantityDisplay");

                    b.Property<string>("QuantityUom");

                    b.Property<DateTime>("ReceiveDate");

                    b.Property<string>("Serials");

                    b.Property<string>("SharedKey");

                    b.Property<string>("Sublocation");

                    b.Property<string>("SupplierItemCode");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderReceiveItems");
                });

            modelBuilder.Entity("Stocky.Data.Entities.PurchaseOrderReturnItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<decimal>("Discount");

                    b.Property<bool?>("DiscountIsPercent");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("ProductId");

                    b.Property<Guid>("PurchaseOrderId");

                    b.Property<decimal>("Quantity");

                    b.Property<decimal?>("QuantityDisplay");

                    b.Property<string>("QuantityUom");

                    b.Property<DateTime>("ReturnDate");

                    b.Property<string>("Serials");

                    b.Property<string>("SharedKey");

                    b.Property<decimal>("SubTotal");

                    b.Property<decimal>("UnitPrice");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("VendorItemCode");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderReturnItems");
                });

            modelBuilder.Entity("Stocky.Data.Entities.PurchaseOrderUnstockItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("LocationId");

                    b.Property<Guid>("ProductId");

                    b.Property<Guid>("PurchaseOrderId");

                    b.Property<decimal>("Quantity");

                    b.Property<decimal?>("QuantityDisplay");

                    b.Property<string>("QuantityUom");

                    b.Property<string>("Serials");

                    b.Property<string>("SharedKey");

                    b.Property<string>("Sublocation");

                    b.Property<byte[]>("Timestamp");

                    b.Property<DateTime>("UnstockDate");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("VendorItemCode");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderUnstockItems");
                });

            modelBuilder.Entity("Stocky.Data.Entities.ReceivingAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("AddressRemarks");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("PostalCode");

                    b.Property<string>("SharedKey");

                    b.Property<string>("State");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ReceivingAddresses");
                });

            modelBuilder.Entity("Stocky.Data.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Stocky.Data.Entities.SaleOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments")
                        .HasMaxLength(2000);

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CustomerAddress")
                        .HasMaxLength(500);

                    b.Property<string>("CustomerCity")
                        .HasMaxLength(100);

                    b.Property<string>("CustomerEmail")
                        .HasMaxLength(100);

                    b.Property<Guid?>("CustomerId");

                    b.Property<string>("CustomerMobile")
                        .HasMaxLength(30);

                    b.Property<string>("CustomerName")
                        .HasMaxLength(150);

                    b.Property<string>("CustomerPhone")
                        .HasMaxLength(30);

                    b.Property<string>("CustomerState")
                        .HasMaxLength(100);

                    b.Property<string>("CustomerStreet")
                        .HasMaxLength(100);

                    b.Property<string>("CustomerZipCode")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("LocationId");

                    b.Property<DateTime?>("OrderDate");

                    b.Property<string>("OrderReference")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ProductId");

                    b.Property<DateTime?>("RequiredDate");

                    b.Property<string>("SharedKey");

                    b.Property<DateTime?>("ShippedDate");

                    b.Property<Guid?>("StaffId");

                    b.Property<int>("Status");

                    b.Property<decimal>("TotalAmount");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StaffId");

                    b.ToTable("SaleOrders");
                });

            modelBuilder.Entity("Stocky.Data.Entities.SaleOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<decimal>("Discount");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<Guid?>("SaleOrderId");

                    b.Property<string>("SharedKey");

                    b.Property<decimal>("UnitPrice");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("SaleOrderItems");
                });

            modelBuilder.Entity("Stocky.Data.Entities.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("SharedKey");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("Stocky.Data.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("LocationId");

                    b.Property<Guid?>("ManagerId");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("SharedKey");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("Stocky.Data.Entities.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("LocationId");

                    b.Property<Guid>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<string>("SharedKey");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId", "LocationId")
                        .IsUnique();

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Stocky.Data.Entities.StockAdjustment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdjustmentNumber");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCancelled");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Remarks");

                    b.Property<string>("SharedKey");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("StockAdjustments");
                });

            modelBuilder.Entity("Stocky.Data.Entities.StockAdjustmentAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AttachmentId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("SharedKey");

                    b.Property<Guid>("StockAdjustmentId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("StockAdjustmentId");

                    b.HasIndex("AttachmentId", "StockAdjustmentId")
                        .IsUnique();

                    b.ToTable("StockAdjustmentAttachments");
                });

            modelBuilder.Entity("Stocky.Data.Entities.StockAdjustmentItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<decimal?>("Difference");

                    b.Property<decimal?>("DifferenceDisplay");

                    b.Property<string>("DifferenceUom");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("LocationId");

                    b.Property<Guid>("ProductId");

                    b.Property<decimal?>("QuantityAfter");

                    b.Property<decimal?>("QuantityAfterDisplay");

                    b.Property<string>("QuantityAfterUom");

                    b.Property<decimal?>("QuantityBefore");

                    b.Property<decimal?>("QuantityBeforeDisplay");

                    b.Property<string>("QuantityBeforeUom");

                    b.Property<string>("Serials");

                    b.Property<string>("SharedKey");

                    b.Property<Guid>("StockAdjustmentId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockAdjustmentId");

                    b.HasIndex("LocationId", "ProductId", "StockAdjustmentId")
                        .IsUnique();

                    b.ToTable("StockAdjustmentItems");
                });

            modelBuilder.Entity("Stocky.Data.Entities.StockAdjustmentItemVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<decimal?>("Difference");

                    b.Property<decimal?>("DifferenceDisplay");

                    b.Property<string>("DifferenceUom");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("LocationId");

                    b.Property<Guid?>("ProductId");

                    b.Property<decimal?>("QuantityAfter");

                    b.Property<decimal?>("QuantityAfterDisplay");

                    b.Property<string>("QuantityAfterUom");

                    b.Property<decimal?>("QuantityBefore");

                    b.Property<decimal?>("QuantityBeforeDisplay");

                    b.Property<string>("QuantityBeforeUom");

                    b.Property<string>("Serials");

                    b.Property<string>("SharedKey");

                    b.Property<Guid?>("StockAdjustmentId");

                    b.Property<Guid?>("StockAdjustmentItemId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockAdjustmentId");

                    b.HasIndex("StockAdjustmentItemId");

                    b.ToTable("StockAdjustmentItemVersions");
                });

            modelBuilder.Entity("Stocky.Data.Entities.StockAdjustmentVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdjustmentNumber");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCancelled");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Remarks");

                    b.Property<string>("SharedKey");

                    b.Property<Guid>("StockAdjustmentId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("StockAdjustmentId");

                    b.ToTable("StockAdjustmentVersions");
                });

            modelBuilder.Entity("Stocky.Data.Entities.StockTransfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCancelled");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ReceivedDate");

                    b.Property<string>("Remarks");

                    b.Property<DateTime?>("SentDate");

                    b.Property<string>("SharedKey");

                    b.Property<int>("Status");

                    b.Property<DateTime>("TransferDate");

                    b.Property<string>("TransferNumber");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("StockTransfers");
                });

            modelBuilder.Entity("Stocky.Data.Entities.StockTransferAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AttachmentId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("SharedKey");

                    b.Property<Guid>("StockTransferId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("StockTransferId");

                    b.HasIndex("AttachmentId", "StockTransferId")
                        .IsUnique();

                    b.ToTable("StockTransferAttachments");
                });

            modelBuilder.Entity("Stocky.Data.Entities.StockTransferItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<Guid>("FromLocationId");

                    b.Property<string>("FromSublocation");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("ProductId");

                    b.Property<decimal>("Quantity");

                    b.Property<decimal?>("QuantityDisplay");

                    b.Property<string>("QuantityUom");

                    b.Property<string>("Serials");

                    b.Property<string>("SharedKey");

                    b.Property<Guid>("StockTransferId");

                    b.Property<Guid>("ToLocationId");

                    b.Property<string>("ToSublocation");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("FromLocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockTransferId");

                    b.HasIndex("ToLocationId");

                    b.ToTable("StockTransferItems");
                });

            modelBuilder.Entity("Stocky.Data.Entities.StockTransferItemVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<Guid?>("FromLocationId");

                    b.Property<string>("FromSublocation");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("ProductId");

                    b.Property<decimal>("Quantity");

                    b.Property<decimal?>("QuantityDisplay");

                    b.Property<string>("QuantityUom");

                    b.Property<string>("Serials");

                    b.Property<string>("SharedKey");

                    b.Property<Guid?>("StockTransferId");

                    b.Property<Guid?>("StockTransferItemId");

                    b.Property<Guid?>("ToLocationId");

                    b.Property<string>("ToSublocation");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("FromLocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockTransferId");

                    b.HasIndex("StockTransferItemId");

                    b.HasIndex("ToLocationId");

                    b.ToTable("StockTransferItemVersions");
                });

            modelBuilder.Entity("Stocky.Data.Entities.StockTransferVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCancelled");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ReceivedDate");

                    b.Property<string>("Remarks");

                    b.Property<DateTime?>("SentDate");

                    b.Property<string>("SharedKey");

                    b.Property<int>("Status");

                    b.Property<Guid?>("StockTransferId");

                    b.Property<DateTime>("TransferDate");

                    b.Property<string>("TransferNumber");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("StockTransferId");

                    b.ToTable("StockTransferVersions");
                });

            modelBuilder.Entity("Stocky.Data.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("AddressRemarks");

                    b.Property<string>("City");

                    b.Property<string>("ContactName");

                    b.Property<string>("Country");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<decimal>("Discount");

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Remarks");

                    b.Property<string>("SharedKey");

                    b.Property<string>("State");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("Version");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Stocky.Data.Entities.SupplierAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("AddressRemarks");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("PostalCode");

                    b.Property<string>("SharedKey");

                    b.Property<string>("State");

                    b.Property<Guid>("SupplierId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierAddresses");
                });

            modelBuilder.Entity("Stocky.Data.Entities.SupplierAddressVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("AddressRemarks");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("PostalCode");

                    b.Property<string>("SharedKey");

                    b.Property<string>("State");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("VendorAddressId");

                    b.Property<int>("VendorId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("SupplierAddressVersions");
                });

            modelBuilder.Entity("Stocky.Data.Entities.SupplierAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AttachmentId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("SharedKey");

                    b.Property<Guid>("SupplierId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.HasIndex("AttachmentId", "SupplierId")
                        .IsUnique();

                    b.ToTable("SupplierAttachments");
                });

            modelBuilder.Entity("Stocky.Data.Entities.SupplierItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Cost");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("ProductId");

                    b.Property<string>("SharedKey");

                    b.Property<Guid?>("SupplierId");

                    b.Property<string>("SupplierItemCode");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.HasIndex("ProductId", "SupplierId")
                        .IsUnique();

                    b.ToTable("SupplierItems");
                });

            modelBuilder.Entity("Stocky.Data.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.Property<string>("SharedKey");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Stocky.Data.Entities.TransactionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApplicationUserId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("CumQty");

                    b.Property<int>("InvoiceChange");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Quantity");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500);

                    b.Property<string>("SharedKey");

                    b.Property<string>("Type")
                        .HasMaxLength(50);

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Stocky.Data.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Stocky.Data.Entities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Stocky.Data.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRole");
                });

            modelBuilder.Entity("Stocky.Data.Entities.UserToken", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("Stocky.Data.Entities.Category", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");
                });

            modelBuilder.Entity("Stocky.Data.Entities.CountSheetAttachment", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stocky.Data.Entities.CountSheet", "CountSheet")
                        .WithMany("CountSheetAttachments")
                        .HasForeignKey("CountSheetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stocky.Data.Entities.CountSheetItem", b =>
                {
                    b.HasOne("Stocky.Data.Entities.CountSheet", "CountSheet")
                        .WithMany("CountSheetItems")
                        .HasForeignKey("CountSheetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stocky.Data.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stocky.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stocky.Data.Entities.CountSheetItemVersion", b =>
                {
                    b.HasOne("Stocky.Data.Entities.CountSheet", "CountSheet")
                        .WithMany()
                        .HasForeignKey("CountSheetId");

                    b.HasOne("Stocky.Data.Entities.CountSheetItem", "CountSheetItem")
                        .WithMany("CountSheetItemVersions")
                        .HasForeignKey("CountSheetItemId");

                    b.HasOne("Stocky.Data.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("Stocky.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Stocky.Data.Entities.CountSheetVersion", b =>
                {
                    b.HasOne("Stocky.Data.Entities.CountSheet", "CountSheet")
                        .WithMany("CountSheetVersions")
                        .HasForeignKey("CountSheetId");
                });

            modelBuilder.Entity("Stocky.Data.Entities.Image", b =>
                {
                    b.HasOne("Stocky.Data.Entities.ApplicationUser", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Stocky.Data.Entities.Product", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("Stocky.Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Stocky.Data.Entities.Color", "Color")
                        .WithMany("Products")
                        .HasForeignKey("ColorId");

                    b.HasOne("Stocky.Data.Entities.Location", "DefaultLocation")
                        .WithMany("Products")
                        .HasForeignKey("DefaultLocationId");

                    b.HasOne("Stocky.Data.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("Stocky.Data.Entities.Supplier", "LastSupplier")
                        .WithMany("Products")
                        .HasForeignKey("LastSupplierId");

                    b.HasOne("Stocky.Data.Entities.Product", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("Stocky.Data.Entities.Size", "Size")
                        .WithMany("Products")
                        .HasForeignKey("SizeId");
                });

            modelBuilder.Entity("Stocky.Data.Entities.ProductAttachment", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stocky.Data.Entities.Product", "Product")
                        .WithMany("ProductAttachments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stocky.Data.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Location", "Location")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("LocationId");

                    b.HasOne("Stocky.Data.Entities.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stocky.Data.Entities.PurchaseOrderAttachment", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stocky.Data.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderAttachments")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stocky.Data.Entities.PurchaseOrderItem", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Stocky.Data.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("PurchaseOrderId");
                });

            modelBuilder.Entity("Stocky.Data.Entities.PurchaseOrderReceiveItem", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("Stocky.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stocky.Data.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderReceiveItems")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stocky.Data.Entities.PurchaseOrderReturnItem", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stocky.Data.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderReturnItems")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stocky.Data.Entities.PurchaseOrderUnstockItem", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("Stocky.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stocky.Data.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderUnstockItems")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stocky.Data.Entities.RoleClaim", b =>
                {
                    b.HasOne("Stocky.Data.Entities.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stocky.Data.Entities.SaleOrder", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Customer", "Customer")
                        .WithMany("SaleOrders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Stocky.Data.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("Stocky.Data.Entities.Product")
                        .WithMany("SaleOrders")
                        .HasForeignKey("ProductId");

                    b.HasOne("Stocky.Data.Entities.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");
                });

            modelBuilder.Entity("Stocky.Data.Entities.SaleOrderItem", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Product", "Product")
                        .WithMany("SaleOrderItems")
                        .HasForeignKey("ProductId");

                    b.HasOne("Stocky.Data.Entities.SaleOrder", "SaleOrder")
                        .WithMany("SaleOrderItems")
                        .HasForeignKey("SaleOrderId");
                });

            modelBuilder.Entity("Stocky.Data.Entities.Staff", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Location", "Location")
                        .WithMany("Staffs")
                        .HasForeignKey("LocationId");

                    b.HasOne("Stocky.Data.Entities.Staff", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");
                });

            modelBuilder.Entity("Stocky.Data.Entities.Stock", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Location", "Location")
                        .WithMany("Stocks")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stocky.Data.Entities.Product", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stocky.Data.Entities.StockAdjustmentAttachment", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stocky.Data.Entities.StockAdjustment", "StockAdjustment")
                        .WithMany("StockAdjustmentAttachments")
                        .HasForeignKey("StockAdjustmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stocky.Data.Entities.StockAdjustmentItem", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Location", "Location")
                        .WithMany("StockAdjustmentItems")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stocky.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stocky.Data.Entities.StockAdjustment", "StockAdjustment")
                        .WithMany("StockAdjustmentItems")
                        .HasForeignKey("StockAdjustmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stocky.Data.Entities.StockAdjustmentItemVersion", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("Stocky.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Stocky.Data.Entities.StockAdjustment", "StockAdjustment")
                        .WithMany("StockAdjustmentItemVersions")
                        .HasForeignKey("StockAdjustmentId");

                    b.HasOne("Stocky.Data.Entities.StockAdjustmentItem", "StockAdjustmentItem")
                        .WithMany("StockAdjustmentItemVersions")
                        .HasForeignKey("StockAdjustmentItemId");
                });

            modelBuilder.Entity("Stocky.Data.Entities.StockAdjustmentVersion", b =>
                {
                    b.HasOne("Stocky.Data.Entities.StockAdjustment", "StockAdjustment")
                        .WithMany()
                        .HasForeignKey("StockAdjustmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stocky.Data.Entities.StockTransferAttachment", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stocky.Data.Entities.StockTransfer", "StockTransfer")
                        .WithMany("StockTransferAttachments")
                        .HasForeignKey("StockTransferId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stocky.Data.Entities.StockTransferItem", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Location", "FromLocation")
                        .WithMany()
                        .HasForeignKey("FromLocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stocky.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Stocky.Data.Entities.StockTransfer", "StockTransfer")
                        .WithMany("StockTransferItems")
                        .HasForeignKey("StockTransferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stocky.Data.Entities.Location", "ToLocation")
                        .WithMany()
                        .HasForeignKey("ToLocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stocky.Data.Entities.StockTransferItemVersion", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Location", "FromLocation")
                        .WithMany()
                        .HasForeignKey("FromLocationId");

                    b.HasOne("Stocky.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Stocky.Data.Entities.StockTransfer", "StockTransfer")
                        .WithMany()
                        .HasForeignKey("StockTransferId");

                    b.HasOne("Stocky.Data.Entities.StockTransferItem", "StockTransferItem")
                        .WithMany("StockTransferItemVersions")
                        .HasForeignKey("StockTransferItemId");

                    b.HasOne("Stocky.Data.Entities.Location", "ToLocation")
                        .WithMany()
                        .HasForeignKey("ToLocationId");
                });

            modelBuilder.Entity("Stocky.Data.Entities.StockTransferVersion", b =>
                {
                    b.HasOne("Stocky.Data.Entities.StockTransfer", "StockTransfer")
                        .WithMany("StockTransferVersions")
                        .HasForeignKey("StockTransferId");
                });

            modelBuilder.Entity("Stocky.Data.Entities.SupplierAddress", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Supplier", "Supplier")
                        .WithMany("SupplierAddresses")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stocky.Data.Entities.SupplierAttachment", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stocky.Data.Entities.Supplier", "Supplier")
                        .WithMany("SupplierAttachments")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stocky.Data.Entities.SupplierItem", b =>
                {
                    b.HasOne("Stocky.Data.Entities.Product", "Product")
                        .WithMany("SupplierItems")
                        .HasForeignKey("ProductId");

                    b.HasOne("Stocky.Data.Entities.Supplier", "Supplier")
                        .WithMany("SupplierItems")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("Stocky.Data.Entities.TransactionHistory", b =>
                {
                    b.HasOne("Stocky.Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Stocky.Data.Entities.UserClaim", b =>
                {
                    b.HasOne("Stocky.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stocky.Data.Entities.UserLogin", b =>
                {
                    b.HasOne("Stocky.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stocky.Data.Entities.UserRole", b =>
                {
                    b.HasOne("Stocky.Data.Entities.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stocky.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stocky.Data.Entities.UserToken", b =>
                {
                    b.HasOne("Stocky.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
